{"componentChunkName":"component---src-templates-blog-post-js","path":"/django/drf-annotate/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"476d819c-f8e4-513b-9bc4-1175cd35bd72","excerpt":"Contents 🔷 요구 사항 [🔷 문제 상황](#-🔷-문제 상황) 🔷 해결 1. ViewSet의 get_queryset 수정하기 2. models.Manager 활용하기 🔷 요구 사항 공연 상태 기준으로 공연 목록 필터링 (e.g…","html":"<h1>Contents</h1>\n<ul>\n<li><a href=\"#-%F0%9F%94%B7-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD\">🔷 요구 사항</a></li>\n<li>[🔷 문제 상황](#-🔷-문제 상황)</li>\n<li><a href=\"#-%F0%9F%94%B7-%ED%95%B4%EA%B2%B0\">🔷 해결</a>\n<ul>\n<li><a href=\"##-1.-ViewSet%EC%9D%98-get_queryset-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\">1. ViewSet의 get_queryset 수정하기</a></li>\n<li><a href=\"##-2.-models.Manager-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\">2. models.Manager 활용하기</a></li>\n</ul>\n</li>\n</ul>\n<br>\n<br>\n<h1>🔷 요구 사항</h1>\n<ul>\n<li>공연 상태 기준으로 공연 목록 필터링\n<ul>\n<li>(e.g.) <code class=\"language-text\">/performance?status=예정</code></li>\n</ul>\n</li>\n</ul>\n<h1>🔷 문제 상황</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># models.py</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Performance</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    genre <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Genre<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span> related_name<span class=\"token operator\">=</span><span class=\"token string\">'performances'</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'장르'</span><span class=\"token punctuation\">)</span>\n    code <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'KOPIS 공연ID'</span><span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'공연명'</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'티켓 가격'</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    started_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span>verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'공연 시작일'</span><span class=\"token punctuation\">)</span>\n    ended_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span>verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'공연 종료일'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_status</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token string\">\"공연 상태 반환\"</span>\n        today <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>started_at <span class=\"token operator\">&lt;=</span> today <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>ended_at<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"공연 중\"</span>\n        <span class=\"token keyword\">elif</span> today <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>ended_at<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"종료\"</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"예정\"</span></code></pre></div>\n<ul>\n<li>\n<p>공연 상태는 <code class=\"language-text\">get_status</code>라는 인스턴스 메소드로 판별 되고 있음</p>\n</li>\n<li>\n<p>ORM 쿼리셋에서 직접 필터링 할 수 없음</p>\n<p>→ ✨ <code class=\"language-text\">annotate()</code>를 활용해서 쿼리셋에 필드 추가 해야 함</p>\n</li>\n</ul>\n<h1>🔷 해결</h1>\n<h2>1. <code class=\"language-text\">ViewSet</code>의 <code class=\"language-text\">get_queryset</code> 수정하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># serializers.py</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    genre <span class=\"token operator\">=</span> GenreSerializer<span class=\"token punctuation\">(</span>read_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    status <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>source<span class=\"token operator\">=</span><span class=\"token string\">'get_status'</span><span class=\"token punctuation\">,</span> read_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Performance\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'genre'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'status'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'started_at'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ended_at'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># views.py</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Case<span class=\"token punctuation\">,</span> When<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">,</span> CharField\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> viewsets<span class=\"token punctuation\">,</span> mixins\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Performance\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> PerformanceSerializer\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceViewSet</span><span class=\"token punctuation\">(</span>mixins<span class=\"token punctuation\">.</span>ListModelMixin<span class=\"token punctuation\">,</span>\n                         mixins<span class=\"token punctuation\">.</span>RetrieveModelMixin<span class=\"token punctuation\">,</span>\n                         viewsets<span class=\"token punctuation\">.</span>GenericViewSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"공연 리스트 및 상세 조회 API\"\"\"</span>\n    serializer_class <span class=\"token operator\">=</span> PerformanceSerializer\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_queryset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"✅ `status`를 필드처럼 사용 가능하도록 `annotate()` 활용\"\"\"</span>\n        today <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        queryset <span class=\"token operator\">=</span> Performance<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>select_related<span class=\"token punctuation\">(</span><span class=\"token string\">'genre'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>annotate<span class=\"token punctuation\">(</span>\n            status<span class=\"token operator\">=</span>Case<span class=\"token punctuation\">(</span>\n                When<span class=\"token punctuation\">(</span>started_at__lte<span class=\"token operator\">=</span>today<span class=\"token punctuation\">,</span> ended_at__gte<span class=\"token operator\">=</span>today<span class=\"token punctuation\">,</span> then<span class=\"token operator\">=</span>Value<span class=\"token punctuation\">(</span><span class=\"token string\">\"공연 중\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                When<span class=\"token punctuation\">(</span>ended_at__lt<span class=\"token operator\">=</span>today<span class=\"token punctuation\">,</span> then<span class=\"token operator\">=</span>Value<span class=\"token punctuation\">(</span><span class=\"token string\">\"종료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                default<span class=\"token operator\">=</span>Value<span class=\"token punctuation\">(</span><span class=\"token string\">\"예정\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                output_field<span class=\"token operator\">=</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n        status <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>query_params<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">if</span> status<span class=\"token punctuation\">:</span>\n            queryset <span class=\"token operator\">=</span> queryset<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> queryset</code></pre></div>\n<ul>\n<li>\n<p>공연 상태(<code class=\"language-text\">status</code>) 기준으로 필터링 가능 🙃</p>\n</li>\n<li>\n<p>공연 목록 데이터가 serializer 될 때 <code class=\"language-text\">status</code> 필드의 값은 인스턴스 메소드로 정의된 <code class=\"language-text\">get_status</code> 를 통해 확인하게 됨</p>\n<p>→ <code class=\"language-text\">models.py</code>와 <code class=\"language-text\">views.py</code>에 <code class=\"language-text\">status</code> 계산 하는 중복 로직이 존재하게 됨</p>\n</li>\n</ul>\n<h2>2. <code class=\"language-text\">models.Manager</code> 활용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># models.py</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceManager</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Manager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_queryset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        today <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_queryset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>annotate<span class=\"token punctuation\">(</span>\n            status<span class=\"token operator\">=</span>Case<span class=\"token punctuation\">(</span>\n                When<span class=\"token punctuation\">(</span>started_at__lte<span class=\"token operator\">=</span>today<span class=\"token punctuation\">,</span> ended_at__gte<span class=\"token operator\">=</span>today<span class=\"token punctuation\">,</span> then<span class=\"token operator\">=</span>Value<span class=\"token punctuation\">(</span><span class=\"token string\">\"공연 중\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                When<span class=\"token punctuation\">(</span>ended_at__lt<span class=\"token operator\">=</span>today<span class=\"token punctuation\">,</span> then<span class=\"token operator\">=</span>Value<span class=\"token punctuation\">(</span><span class=\"token string\">\"종료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                default<span class=\"token operator\">=</span>Value<span class=\"token punctuation\">(</span><span class=\"token string\">\"예정\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                output_field<span class=\"token operator\">=</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Performance</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    genre <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Genre<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span> related_name<span class=\"token operator\">=</span><span class=\"token string\">'performances'</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'장르'</span><span class=\"token punctuation\">)</span>\n    code <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'KOPIS 공연ID'</span><span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'공연명'</span><span class=\"token punctuation\">)</span>\n    price <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'티켓 가격'</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    started_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span>verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'공연 시작일'</span><span class=\"token punctuation\">)</span>\n    ended_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span>verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'공연 종료일'</span><span class=\"token punctuation\">)</span>\n\n    objects <span class=\"token operator\">=</span> PerformanceManager<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">models.Manager</code> 의 <code class=\"language-text\">get_queryset()</code> 을 수정하여 공연 데이터를 조회 할 때 status 필드가 추가 될 수 있도록 함</li>\n<li><code class=\"language-text\">ViewSet</code>에서 사용하는 <code class=\"language-text\">queryset</code>은 <code class=\"language-text\">model.Manager</code>가 반환하는 쿼리셋을 기반하기 때문에 <code class=\"language-text\">annotate()</code> 로직을 model에 작성</li>\n</ul>\n<h3>✅ serializers 수정</h3>\n<ul>\n<li><code class=\"language-text\">Performance</code> 모델의 <code class=\"language-text\">queryset</code>에서 <code class=\"language-text\">status</code>를 <code class=\"language-text\">annotate()</code>로 추가했기 때문에, <code class=\"language-text\">Serializer</code>에서 <code class=\"language-text\">source='status'</code>를 지정할 필요가 없음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> serializers\n<span class=\"token keyword\">from</span> performance<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Performance\n<span class=\"token keyword\">from</span> genre<span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> GenreSerializer\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    genre <span class=\"token operator\">=</span> GenreSerializer<span class=\"token punctuation\">(</span>read_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    status <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>read_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ✅ source 제거</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Performance\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'genre'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'status'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'started_at'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ended_at'</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<h3>✅ 최종 view</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> viewsets<span class=\"token punctuation\">,</span> mixins\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Performance\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> PerformanceSerializer\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceViewSet</span><span class=\"token punctuation\">(</span>mixins<span class=\"token punctuation\">.</span>ListModelMixin<span class=\"token punctuation\">,</span>\n                         mixins<span class=\"token punctuation\">.</span>RetrieveModelMixin<span class=\"token punctuation\">,</span>\n                         viewsets<span class=\"token punctuation\">.</span>GenericViewSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"공연 리스트 및 상세 조회 API\"\"\"</span>\n    serializer_class <span class=\"token operator\">=</span> PerformanceSerializer\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_queryset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        queryset <span class=\"token operator\">=</span> Performance<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>select_related<span class=\"token punctuation\">(</span><span class=\"token string\">'genre'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        status <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>query_params<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> status<span class=\"token punctuation\">:</span>\n            queryset <span class=\"token operator\">=</span> queryset<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> queryset</code></pre></div>\n<blockquote>\n<p><a href=\"https://docs.djangoproject.com/en/5.1/ref/models/querysets/#annotate\">django-annotate</a>\n<a href=\"https://stackoverflow.com/questions/56909019/annotations-in-django-with-model-managers\">stackoverflow</a></p>\n</blockquote>","frontmatter":{"title":"📌 DRF - annotate & serializer field","date":"February 19, 2025","description":"ORM의 annotate를 serializer field로 사용하기"}},"previous":{"fields":{"slug":"/django/drf-pagination/"},"frontmatter":{"title":"📌 DRF 톺아보기 - Pagination"}},"next":null},"pageContext":{"id":"476d819c-f8e4-513b-9bc4-1175cd35bd72","previousPostId":"c35c230f-7b77-5573-92d5-3f1446f10511","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}