{"componentChunkName":"component---src-templates-blog-post-js","path":"/django/drf-pagination/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"c35c230f-7b77-5573-92d5-3f1446f10511","excerpt":"DRF 공식 문서 Contents 🔷 개념 🔷 1. PageNumberPagination 🚀 페이지네이션 정보 에 추가하기 🔷 2. LimitOffsetPagination 🔷 3. CursorPagination 🔹 DRF Pagination…","html":"<blockquote>\n<p><a href=\"https://www.django-rest-framework.org/api-guide/pagination/\">DRF 공식 문서</a></p>\n</blockquote>\n<h1>Contents</h1>\n<ul>\n<li><a href=\"#-%F0%9F%94%B7-%EA%B0%9C%EB%85%90\">🔷 개념</a></li>\n<li><a href=\"#-%F0%9F%94%B7-1.-PageNumberPagination\">🔷 1. PageNumberPagination</a>\n<ul>\n<li><a href=\"##-%F0%9F%9A%80-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-%EC%A0%95%EB%B3%B4-Response-Header%EC%97%90-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">🚀 페이지네이션 정보 <code class=\"language-text\">Response Header</code>에 추가하기</a></li>\n</ul>\n</li>\n<li><a href=\"#-%F0%9F%94%B7-2.-LimitOffsetPagination\">🔷 2. LimitOffsetPagination</a></li>\n<li><a href=\"#-%F0%9F%94%B7-3.-CursorPagination\">🔷 3. CursorPagination</a></li>\n<li><a href=\"#-%F0%9F%94%B9-DRF-Pagination-%EB%B0%A9%EC%8B%9D-%EB%B9%84%EA%B5%90%ED%91%9C\">🔹 DRF Pagination 방식 비교표</a></li>\n<li><a href=\"#-%F0%9F%94%B9-%EC%96%B4%EB%96%A4-Pagination%EC%9D%84-%EC%84%A0%ED%83%9D%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C?\">🔹 어떤 Pagination을 선택해야 할까?</a></li>\n</ul>\n<br>\n<br>\n<h1>🔷 개념</h1>\n<ul>\n<li>\n<p>대량의 데이터를 여러 페이지로 나누어 조회하는 기법</p>\n</li>\n<li>\n<p>REST API에서 페이지네이션을 적용하면 클라이언트가 한 번에 모든 데이터를 불러오는 것이 아니라, 필요한 만큼만 가져올 수 있음</p>\n<p>→ 데이터베이스의 부담을 줄이고 API 응답 속도를 개선</p>\n</li>\n<li>\n<p>view가 <code class=\"language-text\">generic views</code> or <code class=\"language-text\">viewsets</code>  구현되어 있다면, settings.py에 설정하면 자동으로 실행됨</p>\n</li>\n<li>\n<p><code class=\"language-text\">APIView</code> 으로 구현한 경우 직접 페이지네이션한 응답을 전달해야 함</p>\n</li>\n</ul>\n<h1>🔷 1. PageNumberPagination</h1>\n<p>✅ <strong>개념</strong></p>\n<ul>\n<li>페이지 번호(<code class=\"language-text\">page</code>)를 기반으로 데이터를 나누는 방식</li>\n<li>사용자가 특정 페이지 번호를 요청하면 해당 페이지의 데이터만 반환됨.</li>\n<li>일반적인 웹사이트의 \"다음 페이지”, \"이전 페이지\" 방식과 동일함.</li>\n</ul>\n<p>✅ <strong>장점</strong></p>\n<ul>\n<li><code class=\"language-text\">?page=2</code>와 같은 직관적인 URL로 페이지 요청이 가능함.</li>\n<li><code class=\"language-text\">count</code>(전체 데이터 개수) 포함 → 총 페이지 수를 쉽게 계산할 수 있음.</li>\n</ul>\n<p>✅ <strong>단점</strong></p>\n<ul>\n<li>데이터가 많아지고 특정 페이지로 이동하려면 부담이 커짐.</li>\n<li><code class=\"language-text\">count</code>를 계산하는 쿼리가 실행되므로 대량의 데이터에서 성능 저하 가능.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># pagination.py</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>pagination <span class=\"token keyword\">import</span> PageNumberPagination\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StandardResultsSetPagination</span><span class=\"token punctuation\">(</span>PageNumberPagination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    page_size <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    page_size_query_param <span class=\"token operator\">=</span> <span class=\"token string\">'page_size'</span>\n    max_page_size <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    \n    \n<span class=\"token comment\"># views.py</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> viewsets<span class=\"token punctuation\">,</span> mixins\n<span class=\"token keyword\">from</span> core<span class=\"token punctuation\">.</span>paginations <span class=\"token keyword\">import</span> StandardResultsSetPagination\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Performance\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> PerformanceSerializer\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceViewSet</span><span class=\"token punctuation\">(</span>mixins<span class=\"token punctuation\">.</span>ListModelMixin<span class=\"token punctuation\">,</span>\n                         mixins<span class=\"token punctuation\">.</span>RetrieveModelMixin<span class=\"token punctuation\">,</span>\n                         viewsets<span class=\"token punctuation\">.</span>GenericViewSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"공연 리스트 및 상세 조회 API\"\"\"</span>\n    serializer_class <span class=\"token operator\">=</span> PerformanceSerializer\n    pagination_class <span class=\"token operator\">=</span> StandardResultsSetPagination</code></pre></div>\n<ul>\n<li><code class=\"language-text\">page_size</code> : 한 번에 가져올 데이터 개수</li>\n<li><code class=\"language-text\">page_query_param</code>\n<ul>\n<li><code class=\"language-text\">page</code> 라는 query parm 사용 할 수 있음</li>\n<li>(e.g.)<code class=\"language-text\">/performance?status=공연 중&amp;page=1</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">page_size_query_param</code>\n<ul>\n<li>원하는 사이즈로 조정할 수 있는 query parm</li>\n<li>(e.g.)<code class=\"language-text\">/performance?status=공연 중&amp;page_size=10</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">max_page_size</code>\n<ul>\n<li>최대 지정할 수 있는 <code class=\"language-text\">page_size</code></li>\n<li><code class=\"language-text\">max_page_size</code> 보다 큰 값이 query_param으로 들어온 경우 설정된 값으로 실행</li>\n<li>(e.g.)<code class=\"language-text\">/performance?status=공연 중&amp;page_size=200</code>  → <code class=\"language-text\">page_size</code>=100으로 실행</li>\n</ul>\n</li>\n<li><code class=\"language-text\">last_page_strings</code>\n<ul>\n<li>마지막 페이지로 이동 하고 싶을 때 page 번호가 아닌 <code class=\"language-text\">last</code> 라는 문자열로 검색 할 수 있음</li>\n<li>(e.g.)<code class=\"language-text\">/performance?status=공연 중&amp;page=last</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.django-rest-framework.org/api-guide/pagination/#configuration\">https://www.django-rest-framework.org/api-guide/pagination/#configuration</a></p>\n</blockquote>\n<h3>📌 기본 응답 형태</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"next\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://127.0.0.1:8000/performance/?page=2&amp;page_size=2&amp;status=%EA%B3%B5%EC%97%B0+%EC%A4%91\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"previous\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"results\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"genre\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"뮤지컬\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"웃는 남자\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"공연 중\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">170000</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"started_at\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2025-01-09\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"ended_at\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2025-03-09\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"genre\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"뮤지컬\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"지킬앤하이드\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"공연 중\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">170000</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"started_at\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-11-29\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"ended_at\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2025-05-18\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        ...\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>🚀 페이지네이션 정보 <code class=\"language-text\">Response Header</code>에 추가하기</h2>\n<p><code class=\"language-text\">Response Body</code>가 아닌 <code class=\"language-text\">Response Header</code>에 추가 했을 때 장점 (w. <em><strong>GPT</strong></em>)</p>\n<p>✅ <strong>API 응답 크기 감소 (효율성)</strong></p>\n<ul>\n<li><code class=\"language-text\">next</code>, <code class=\"language-text\">previous</code> 같은 정보를 <code class=\"language-text\">Response Body</code>에 포함하면 JSON 크기가 증가</li>\n<li>헤더에 추가하면 응답 데이터(<code class=\"language-text\">results</code> 배열) 크기를 줄일 수 있어 API 성능이 향상</li>\n</ul>\n<p>✅ <strong>RESTful API 원칙에 맞음</strong></p>\n<ul>\n<li>API 응답 본문(<code class=\"language-text\">body</code>)은 리소스 데이터(<code class=\"language-text\">results</code>)만 포함하는 것이 좋</li>\n<li>페이지네이션 메타데이터(<code class=\"language-text\">next</code>, <code class=\"language-text\">previous</code>)는 응답 헤더(<code class=\"language-text\">header</code>)로 분리하는 것이 더 RESTful한 설계 방식</li>\n</ul>\n<p>✅ <strong>클라이언트가 쉽게 처리 가능</strong></p>\n<ul>\n<li>프론트엔드(React, Vue, Angular)나 모바일 앱에서는 <strong>헤더에서 직접 페이지네이션 정보를 추출</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># pagination.py</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>pagination <span class=\"token keyword\">import</span> PageNumberPagination<span class=\"token punctuation\">,</span> CursorPagination\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>response <span class=\"token keyword\">import</span> Response\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StandardResultsSetPagination</span><span class=\"token punctuation\">(</span>PageNumberPagination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    page_size <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    page_size_query_param <span class=\"token operator\">=</span> <span class=\"token string\">'page_size'</span>\n    max_page_size <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_paginated_response</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 페이지네이션 링크를 헤더에 추가</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>get_next_link<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Next-Page'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_next_link<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>get_previous_link<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Previous-Page'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_previous_link<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Total-Count'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">.</span>paginator<span class=\"token punctuation\">.</span>count\n\n        <span class=\"token keyword\">return</span> response</code></pre></div>\n<p>→ <a href=\"https://www.django-rest-framework.org/api-guide/pagination/#link-header-pagination\">link-header-pagination</a> 패키지로도 구현 가능</p>\n<h3>📌 변경된 응답 형태</h3>\n<blockquote>\n<p><em>page_size =1, page=1로 테스트</em></p>\n</blockquote>\n<ul>\n<li>\n<p>Response Header</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">HTTP <span class=\"token number\">200</span> OK\nAllow<span class=\"token operator\">:</span> GET<span class=\"token punctuation\">,</span> HEAD<span class=\"token punctuation\">,</span> OPTIONS\nContent-Type<span class=\"token operator\">:</span> application/json\nNext-Page<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token comment\">//127.0.0.1:8000/performance/?page=3&amp;page_size=1&amp;status=%EA%B3%B5%EC%97%B0+%EC%A4%91</span>\nPrevious-Page<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token comment\">//127.0.0.1:8000/performance/?page_size=1&amp;status=%EA%B3%B5%EC%97%B0+%EC%A4%91</span>\nTotal-Count<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\nVary<span class=\"token operator\">:</span> Accept</code></pre></div>\n</li>\n<li>\n<p>Response Body</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"genre\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"뮤지컬\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"지킬앤하이드\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"공연 중\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">170000</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"started_at\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-11-29\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"ended_at\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2025-05-18\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<h1>🔷 2. LimitOffsetPagination</h1>\n<p>✅ <strong>개념</strong></p>\n<ul>\n<li>클라이언트가 <code class=\"language-text\">limit</code>(한 번에 가져올 데이터 개수)와 <code class=\"language-text\">offset</code>(데이터 시작 위치)을 직접 지정하는 방식</li>\n<li>SQL의 <code class=\"language-text\">LIMIT</code>과 <code class=\"language-text\">OFFSET</code> 개념과 유사함.</li>\n</ul>\n<p>✅ <strong>장점</strong></p>\n<ul>\n<li>특정 범위의 데이터를 유연하게 요청할 수 있음 (<code class=\"language-text\">limit=20&amp;offset=100</code> → 101~120번째 데이터 반환).</li>\n<li>사용자가 원하는 <code class=\"language-text\">limit</code>을 조정하여 적절한 데이터 크기를 선택할 수 있음.</li>\n</ul>\n<p>✅ <strong>단점</strong></p>\n<ul>\n<li><code class=\"language-text\">count</code>를 계산하는 쿼리가 실행되므로 대량의 데이터에서는 성능 저하 가능.</li>\n<li><code class=\"language-text\">offset</code> 값이 클 경우, 데이터 조회가 느려질 수 있음.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># settings.py</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n\nREST_FRAMEWORK <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'DEFAULT_PAGINATION_CLASS'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'rest_framework.pagination.LimitOffsetPagination'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'PAGE_SIZE'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 기본 limit 값</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>📌 기본 응답 형태</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"next\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://127.0.0.1:8000/performance/?limit=2&amp;offset=2&amp;status=%EA%B3%B5%EC%97%B0+%EC%A4%91\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"previous\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"results\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"genre\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"뮤지컬\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"웃는 남자\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"공연 중\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">170000</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"started_at\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2025-01-09\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"ended_at\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2025-03-09\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t...\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>🚀 <code class=\"language-text\">count</code>, <code class=\"language-text\">next</code>, <code class=\"language-text\">previous</code> 정보가 있기 때문에 <a href=\"##-%F0%9F%9A%80-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-%EC%A0%95%EB%B3%B4-Response-Header%EC%97%90-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">PageNumberPagination</a>과 마찬가지로 <code class=\"language-text\">Response Header</code>에 해당 정보 추가할 수 있음</p>\n<blockquote>\n<p><a href=\"https://www.django-rest-framework.org/api-guide/pagination/#limitoffsetpagination\">https://www.django-rest-framework.org/api-guide/pagination/#limitoffsetpagination</a></p>\n</blockquote>\n<h1>🔷 3. CursorPagination</h1>\n<p>✅ <strong>개념</strong></p>\n<ul>\n<li>데이터베이스의 특정 필드(일반적으로 <code class=\"language-text\">created_at</code> 또는 <code class=\"language-text\">id</code>)를 기반으로 다음 데이터를 요청하는 방식</li>\n<li>페이스북, 트위터 등의 무한 스크롤 API에서 사용됨.</li>\n<li>데이터 정렬 필수 → <code class=\"language-text\">ordering = '-created'</code> 기본으로 설정되어 있음</li>\n</ul>\n<p>✅ <strong>장점</strong></p>\n<ul>\n<li><code class=\"language-text\">count</code> 쿼리가 필요 없으므로, 대량의 데이터를 빠르게 조회할 수 있음.</li>\n<li><code class=\"language-text\">offset</code> 기반 페이지네이션보다 성능이 뛰어남.</li>\n</ul>\n<p>✅ <strong>단점</strong></p>\n<ul>\n<li><code class=\"language-text\">next</code>와 <code class=\"language-text\">previous</code>가 암호화된 <code class=\"language-text\">cursor</code> 값으로 반환되어, 사용자가 특정 페이지로 직접 이동할 수 없음.</li>\n<li>데이터 정렬(<code class=\"language-text\">ORDERING</code>)이 필수.</li>\n</ul>\n<h3>📌 기본 응답 형태</h3>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"next\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://127.0.0.1:8000/review/?cursor=cD0yMDI1LTAyLTE4KzA2JTNBNDclM0ExNi4zNTc4MjMlMkIwMCUzQTAw\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"previous\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"results\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"performance\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"진~짜 재밌어요!\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"created_at\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2025-02-18T06:47:16.357823Z\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"updated_at\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2025-02-18T06:47:16.357840Z\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        ...\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">cursor</code> 값은 <code class=\"language-text\">base64</code>로 인코딩된 문자열으로 보안을 위해 <code class=\"language-text\">Header</code>에 추가하는 것이 적절함</p>\n</li>\n<li>\n<p><code class=\"language-text\">cursor</code> 값은 <code class=\"language-text\">id</code> 또는 <code class=\"language-text\">created_at</code> 등의 기준을 포함하고 있어, 직접 수정하면 원치 않는 데이터 조회가 발생할 수 있음</p>\n</li>\n<li>\n<p><code class=\"language-text\">cursor</code> 는 암호화 되어 전달 되므로 <code class=\"language-text\">Response Header</code>에 추가하는 게 더 좋음</p>\n<p>→  <a href=\"##-%F0%9F%9A%80-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98-%EC%A0%95%EB%B3%B4-Response-Header%EC%97%90-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">PageNumberPagination</a>에서 <code class=\"language-text\">Response Header</code> 추가한 내용 참고✨</p>\n</li>\n<li>\n<p><code class=\"language-text\">count</code>(전체 데이터 개수) 쿼리가 없음</p>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.django-rest-framework.org/api-guide/pagination/#cursorpagination\">https://www.django-rest-framework.org/api-guide/pagination/#cursorpagination</a></p>\n</blockquote>\n<h1>🔹 DRF Pagination 방식 비교표</h1>\n<table>\n<thead>\n<tr>\n<th>✅ 방식</th>\n<th>✅ URL 예제</th>\n<th>✅ 특징</th>\n<th>✅ 장점</th>\n<th>✅ 단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">PageNumberPagination</code></td>\n<td><code class=\"language-text\">?page=2</code></td>\n<td><strong>페이지 번호 기반</strong></td>\n<td>직관적인 페이지 이동</td>\n<td>대량 데이터에서 성능 저하 가능</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">LimitOffsetPagination</code></td>\n<td><code class=\"language-text\">?limit=10&amp;offset=20</code></td>\n<td><strong>SQL <code class=\"language-text\">LIMIT OFFSET</code> 방식</strong></td>\n<td>유연한 범위 선택 가능</td>\n<td><code class=\"language-text\">offset</code>이 클 경우 속도 저하</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">CursorPagination</code></td>\n<td><code class=\"language-text\">?cursor=abc123</code></td>\n<td><strong>커서 기반 무한 스크롤</strong></td>\n<td>성능 우수, <code class=\"language-text\">count</code> 쿼리 없음</td>\n<td>특정 페이지 직접 이동 불가능</td>\n</tr>\n</tbody>\n</table>\n<h1>🔹 어떤 Pagination을 선택해야 할까?</h1>\n<p>✅ <strong><code class=\"language-text\">PageNumberPagination</code> →</strong> 일반적인 웹사이트의 페이지네이션처럼 페이지 번호로 데이터를 조회하고 싶을 때.</p>\n<p>✅ <strong><code class=\"language-text\">LimitOffsetPagination</code> →</strong> 클라이언트가 원하는 데이터 개수(<code class=\"language-text\">limit</code>)와 시작 위치(<code class=\"language-text\">offset</code>)을 지정하고 싶을 때.</p>\n<p>✅ <strong><code class=\"language-text\">CursorPagination</code> →</strong> 무한 스크롤이 필요하고, 성능을 최적화하고 싶을 때 (페이스북, 트위터 등).</p>\n<p>😊 <strong>즉, 일반적인 REST API에는 <code class=\"language-text\">PageNumberPagination</code>이 적절하지만, 무한 스크롤을 원한다면 <code class=\"language-text\">CursorPagination</code>을 사용하는 것이 더 좋음!</strong></p>","frontmatter":{"title":"📌 DRF 톺아보기 - Pagination","date":"February 19, 2025","description":"DRF에서 제공하는 페이지네이션 방법 정리"}},"previous":{"fields":{"slug":"/sql/sql-syntax-error/"},"frontmatter":{"title":"✅ sql error - 따옴표"}},"next":{"fields":{"slug":"/django/drf-annotate/"},"frontmatter":{"title":"📌 DRF - annotate & serializer field"}}},"pageContext":{"id":"c35c230f-7b77-5573-92d5-3f1446f10511","previousPostId":"d1430235-0932-599f-af1c-705706f6b424","nextPostId":"476d819c-f8e4-513b-9bc4-1175cd35bd72"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}