{"componentChunkName":"component---src-templates-blog-post-js","path":"/django/drf-cursor_pagination/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"858c21fc-dfbb-5676-aefc-603f5ed5fa2a","excerpt":"공연 리뷰를 무한 스크롤로 조회하고 싶어서 로 구현 했으나, 공연순 정렬이 적용 되지 않아 생긴 문제를 정리한 포스팅 🙃 목차 문제 상황 원인 분석 해결 방법 OrderingFilter 문제 상황 예상된 정렬: 공연 이름() 실제 정렬: 최신 작성일() 원인 분석…","html":"<p>공연 리뷰를 무한 스크롤로 조회하고 싶어서 <code class=\"language-text\">CursorPagination</code>로 구현 했으나,<br>\n공연순 정렬이 적용 되지 않아 생긴 문제를 정리한 포스팅 🙃</p>\n<h1>목차</h1>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9\">문제 상황</a></li>\n<li><a href=\"#%EC%9B%90%EC%9D%B8-%EB%B6%84%EC%84%9D\">원인 분석</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\">해결 방법</a></li>\n<li><a href=\"#orderingfilter\">OrderingFilter</a></li>\n</ul>\n<h1>문제 상황</h1>\n<ul>\n<li>예상된 정렬: 공연 이름(<code class=\"language-text\">performance__name</code>)</li>\n<li>실제 정렬: 최신 작성일(<code class=\"language-text\">-created_at</code>)</li>\n</ul>\n<h1>원인 분석</h1>\n<h3>1️⃣ 쿼리 파라미터 전달 여부 확인</h3>\n<p><code class=\"language-text\">sort_by=name</code>을 잘 전달 되고,<br>\n<code class=\"language-text\">query_set</code>에도 <code class=\"language-text\">order_by('performance__name')</code>이 적용되고 있으나<br>\n최종 응답 값은 <code class=\"language-text\">-created_at</code> 으로 반환됨.. 😇</p>\n<h4><code class=\"language-text\">views.py</code></h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReviewViewSet</span><span class=\"token punctuation\">(</span>viewsets<span class=\"token punctuation\">.</span>ModelViewSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"공연 후기 CRUD API\"\"\"</span>\n    pagination_class <span class=\"token operator\">=</span> StandardCursorPagination\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_queryset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        queryset <span class=\"token operator\">=</span> Review<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>select_related<span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'performance'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>select_related<span class=\"token punctuation\">(</span><span class=\"token string\">'performance__genre'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        is_my_review <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>query_params<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'is_my_review'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        sort_by <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>query_params<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'sort_by'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 마이페이지: 리뷰 정렬</span>\n        \n        <span class=\"token keyword\">if</span> is_my_review<span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 내가 작성한 리뷰만 조회</span>\n            queryset <span class=\"token operator\">=</span> queryset<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>user__id<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> sort_by <span class=\"token operator\">==</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span>\n                queryset <span class=\"token operator\">=</span> queryset<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'performance__name'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                queryset <span class=\"token operator\">=</span> queryset<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'-created_at'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> queryset</code></pre></div>\n<h3>2️⃣ <code class=\"language-text\">CursorPagination</code>의 기본 정렬 확인</h3>\n<p><code class=\"language-text\">StandardCursorPagination</code> 클래스에서 기본 정렬이 <code class=\"language-text\">-created_at</code>으로 되어 있어서,\n<code class=\"language-text\">get_queryset</code>에서 변경한 정렬 기준(<code class=\"language-text\">performance__name</code>)이 적용 안 됨</p>\n<h4><code class=\"language-text\">paginations.py</code></h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StandardCursorPagination</span><span class=\"token punctuation\">(</span>BasePaginationResponseMixin<span class=\"token punctuation\">,</span> CursorPagination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    page_size <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    ordering <span class=\"token operator\">=</span> <span class=\"token string\">'-created_at'</span>  <span class=\"token comment\"># 기본 정렬이 최신 생성일 기준</span></code></pre></div>\n<h3>🔷 <code class=\"language-text\">pagination</code> 적용 시점</h3>\n<ol>\n<li><code class=\"language-text\">get_queryset()</code>에서 데이터베이스 쿼리(<code class=\"language-text\">queryset</code>) 결정</li>\n<li><code class=\"language-text\">pagination</code>이 <code class=\"language-text\">queryset</code>에 적용\n<ul>\n<li><code class=\"language-text\">CursorPagination</code>는 이 단계에 <code class=\"language-text\">ordering</code>과 <code class=\"language-text\">limit</code> 적용</li>\n</ul>\n</li>\n<li><code class=\"language-text\">serializer</code> 호출</li>\n</ol>\n<h1>해결 방법</h1>\n<h3><code class=\"language-text\">OrderingFilter</code>활용</h3>\n<blockquote>\n<p><a href=\"https://www.django-rest-framework.org/api-guide/pagination/#cursorpagination\"><strong>공식 문서</strong></a>: <code class=\"language-text\">ordering</code> 속성을 <code class=\"language-text\">CursorPagination</code> 클래스에서 직접 오버라이드하거나, <code class=\"language-text\">OrderingFilter</code>와 함께 사용하면 동적 정렬이 가능합니다.</p>\n</blockquote>\n<h3>1️⃣ <code class=\"language-text\">CursorPagination</code> 기본 정렬 제거</h3>\n<p>기본 <code class=\"language-text\">ordering</code> 값을 <code class=\"language-text\">None</code>으로 설정하여,<br>\n<code class=\"language-text\">OrderingFilter</code>에서 정렬 기준을 동적으로 반영하게 변경</p>\n<h4><code class=\"language-text\">paginations.py</code></h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StandardCursorPagination</span><span class=\"token punctuation\">(</span>BasePaginationResponseMixin<span class=\"token punctuation\">,</span> CursorPagination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    page_size <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    ordering <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># 기본 정렬 해제</span></code></pre></div>\n<h3>2️⃣ <code class=\"language-text\">OrderingFilter</code> 적용</h3>\n<ul>\n<li><code class=\"language-text\">OrderingFilter</code>를 <code class=\"language-text\">filter_backends</code> 추가하여 클라이언트에서 <code class=\"language-text\">ordering</code> 파라미터를 사용해 정렬</li>\n<li>허용할 정렬 필드를 <code class=\"language-text\">ordering_fields</code>에 명시</li>\n<li>기본 정렬을 <code class=\"language-text\">ordering = ['-created_at']</code>으로 설정하여 쿼리 파라미터가 없을 경우 최신순 정렬이 적용</li>\n</ul>\n<h4><code class=\"language-text\">views.py</code></h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReviewViewSet</span><span class=\"token punctuation\">(</span>viewsets<span class=\"token punctuation\">.</span>ModelViewSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"공연 후기 CRUD API\"\"\"</span>\n    pagination_class <span class=\"token operator\">=</span> StandardCursorPagination\n    filter_backends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>OrderingFilter<span class=\"token punctuation\">]</span>\n    ordering_fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'performance__name'</span><span class=\"token punctuation\">]</span>\n    ordering <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'-created_at'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 기본 정렬: 최신 리뷰</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_queryset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        queryset <span class=\"token operator\">=</span> Review<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>select_related<span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'performance'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>select_related<span class=\"token punctuation\">(</span><span class=\"token string\">'performance__genre'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        is_my_review <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>query_params<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'is_my_review'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">if</span> is_my_review<span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 내가 작성한 리뷰만 조회</span>\n            queryset <span class=\"token operator\">=</span> queryset<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>user__id<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> queryset</code></pre></div>\n<h3>3️⃣ 정렬 쿼리 파라미터 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">GET /reviews/?ordering<span class=\"token operator\">=</span>performance__name  <span class=\"token comment\"># 공연 이름 순 정렬</span>\nGET /reviews/?ordering<span class=\"token operator\">=</span>-created_at       <span class=\"token comment\"># 최신순 정렬</span></code></pre></div>\n<h1>OrderingFilter</h1>\n<p><code class=\"language-text\">OrderingFilter</code>는 Django REST Framework에서 제공하는 필터링 기능 중 하나로, 사용자가 쿼리 파라미터를 통해 원하는 정렬 기준 적용</p>\n<h3>📌 주요 기능</h3>\n<ul>\n<li><code class=\"language-text\">ordering_fields</code> 속성을 사용하여 정렬 가능한 필드를 제한할 수 있음</li>\n<li><code class=\"language-text\">ordering</code> 속성을 설정하면 기본 정렬을 지정할 수 있음</li>\n<li>클라이언트에서 <code class=\"language-text\">?ordering=필드명</code>을 쿼리 파라미터로 전달하여 동적 정렬 가능</li>\n</ul>\n<h3>📌 예제 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>filters <span class=\"token keyword\">import</span> OrderingFilter\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyViewSet</span><span class=\"token punctuation\">(</span>viewsets<span class=\"token punctuation\">.</span>ModelViewSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    filter_backends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>OrderingFilter<span class=\"token punctuation\">]</span>\n    ordering_fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'created_at'</span><span class=\"token punctuation\">]</span>\n    ordering <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'-created_at'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>이렇게 설정하면 클라이언트는 <code class=\"language-text\">?ordering=name</code> 또는 <code class=\"language-text\">?ordering=-created_at</code>과 같은 요청 가능</p>","frontmatter":{"title":"📌 DRF - CursorPagination","date":"March 06, 2025","description":"CursorPagination에서 정렬하기"}},"previous":{"fields":{"slug":"/django/drf-annotate/"},"frontmatter":{"title":"📌 DRF - annotate & serializer field"}},"next":null},"pageContext":{"id":"858c21fc-dfbb-5676-aefc-603f5ed5fa2a","previousPostId":"476d819c-f8e4-513b-9bc4-1175cd35bd72","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}